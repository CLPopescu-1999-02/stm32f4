#include "ssd1306.h"

static const uint8_t FONT[] =
{
        0x00, 0x00, 0x00, 0x00, 0x00,// (space)
        0x00, 0x00, 0x5F, 0x00, 0x00,// !
        0x00, 0x07, 0x00, 0x07, 0x00,// "
        0x14, 0x7F, 0x14, 0x7F, 0x14,// #
        0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
        0x23, 0x13, 0x08, 0x64, 0x62,// %
        0x36, 0x49, 0x55, 0x22, 0x50,// &
        0x00, 0x05, 0x03, 0x00, 0x00,// '
        0x00, 0x1C, 0x22, 0x41, 0x00,// (
        0x00, 0x41, 0x22, 0x1C, 0x00,// )
        0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
        0x08, 0x08, 0x3E, 0x08, 0x08,// +
        0x00, 0x50, 0x30, 0x00, 0x00,// ,
        0x08, 0x08, 0x08, 0x08, 0x08,// -
        0x00, 0x60, 0x60, 0x00, 0x00,// .
        0x20, 0x10, 0x08, 0x04, 0x02,// /
        0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
        0x00, 0x42, 0x7F, 0x40, 0x00,// 1
        0x42, 0x61, 0x51, 0x49, 0x46,// 2
        0x21, 0x41, 0x45, 0x4B, 0x31,// 3
        0x18, 0x14, 0x12, 0x7F, 0x10,// 4
        0x27, 0x45, 0x45, 0x45, 0x39,// 5
        0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
        0x01, 0x71, 0x09, 0x05, 0x03,// 7
        0x36, 0x49, 0x49, 0x49, 0x36,// 8
        0x06, 0x49, 0x49, 0x29, 0x1E,// 9
        0x00, 0x36, 0x36, 0x00, 0x00,// :
        0x00, 0x56, 0x36, 0x00, 0x00,// ;
        0x00, 0x08, 0x14, 0x22, 0x41,// <
        0x14, 0x14, 0x14, 0x14, 0x14,// =
        0x41, 0x22, 0x14, 0x08, 0x00,// >
        0x02, 0x01, 0x51, 0x09, 0x06,// ?
        0x32, 0x49, 0x79, 0x41, 0x3E,// @
        0x7E, 0x11, 0x11, 0x11, 0x7E,// A
        0x7F, 0x49, 0x49, 0x49, 0x36,// B
        0x3E, 0x41, 0x41, 0x41, 0x22,// C
        0x7F, 0x41, 0x41, 0x22, 0x1C,// D
        0x7F, 0x49, 0x49, 0x49, 0x41,// E
        0x7F, 0x09, 0x09, 0x01, 0x01,// F
        0x3E, 0x41, 0x41, 0x51, 0x32,// G
        0x7F, 0x08, 0x08, 0x08, 0x7F,// H
        0x00, 0x41, 0x7F, 0x41, 0x00,// I
        0x20, 0x40, 0x41, 0x3F, 0x01,// J
        0x7F, 0x08, 0x14, 0x22, 0x41,// K
        0x7F, 0x40, 0x40, 0x40, 0x40,// L
        0x7F, 0x02, 0x04, 0x02, 0x7F,// M
        0x7F, 0x04, 0x08, 0x10, 0x7F,// N
        0x3E, 0x41, 0x41, 0x41, 0x3E,// O
        0x7F, 0x09, 0x09, 0x09, 0x06,// P
        0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
        0x7F, 0x09, 0x19, 0x29, 0x46,// R
        0x46, 0x49, 0x49, 0x49, 0x31,// S
        0x01, 0x01, 0x7F, 0x01, 0x01,// T
        0x3F, 0x40, 0x40, 0x40, 0x3F,// U
        0x1F, 0x20, 0x40, 0x20, 0x1F,// V
        0x7F, 0x20, 0x18, 0x20, 0x7F,// W
        0x63, 0x14, 0x08, 0x14, 0x63,// X
        0x03, 0x04, 0x78, 0x04, 0x03,// Y
        0x61, 0x51, 0x49, 0x45, 0x43,// Z
        0x00, 0x00, 0x7F, 0x41, 0x41,// [
        0x02, 0x04, 0x08, 0x10, 0x20,// "\"
        0x41, 0x41, 0x7F, 0x00, 0x00,// ]
        0x04, 0x02, 0x01, 0x02, 0x04,// ^
        0x40, 0x40, 0x40, 0x40, 0x40,// _
        0x00, 0x01, 0x02, 0x04, 0x00,// `
        0x20, 0x54, 0x54, 0x54, 0x78,// a
        0x7F, 0x48, 0x44, 0x44, 0x38,// b
        0x38, 0x44, 0x44, 0x44, 0x20,// c
        0x38, 0x44, 0x44, 0x48, 0x7F,// d
        0x38, 0x54, 0x54, 0x54, 0x18,// e
        0x08, 0x7E, 0x09, 0x01, 0x02,// f
        0x08, 0x14, 0x54, 0x54, 0x3C,// g
        0x7F, 0x08, 0x04, 0x04, 0x78,// h
        0x00, 0x44, 0x7D, 0x40, 0x00,// i
        0x20, 0x40, 0x44, 0x3D, 0x00,// j
        0x00, 0x7F, 0x10, 0x28, 0x44,// k
        0x00, 0x41, 0x7F, 0x40, 0x00,// l
        0x7C, 0x04, 0x18, 0x04, 0x78,// m
        0x7C, 0x08, 0x04, 0x04, 0x78,// n
        0x38, 0x44, 0x44, 0x44, 0x38,// o
        0x7C, 0x14, 0x14, 0x14, 0x08,// p
        0x08, 0x14, 0x14, 0x18, 0x7C,// q
        0x7C, 0x08, 0x04, 0x04, 0x08,// r
        0x48, 0x54, 0x54, 0x54, 0x20,// s
        0x04, 0x3F, 0x44, 0x40, 0x20,// t
        0x3C, 0x40, 0x40, 0x20, 0x7C,// u
        0x1C, 0x20, 0x40, 0x20, 0x1C,// v
        0x3C, 0x40, 0x30, 0x40, 0x3C,// w
        0x44, 0x28, 0x10, 0x28, 0x44,// x
        0x0C, 0x50, 0x50, 0x50, 0x3C,// y
        0x44, 0x64, 0x54, 0x4C, 0x44,// z
        0x00, 0x08, 0x36, 0x41, 0x00,// {
        0x00, 0x00, 0x7F, 0x00, 0x00,// |
        0x00, 0x41, 0x36, 0x08, 0x00,// }
        0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
        0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};


Ssd1306::Ssd1306(Spi &spi, Gpio::Pin &cs, Gpio::Pin& dataCommand, Gpio::Pin& reset) :
    mSpi(spi),
    mCs(cs),
    mDc(dataCommand),
    mReset(reset),
    mSpiEvent(*this)
{
    mCs.set();
    mFb = new uint8_t[FB_SIZE];
    clear();
    memset(&mTransfer, 0, sizeof(mTransfer));
    mTransfer.mMaxSpeed = 10 * 1000 * 1000;
    mTransfer.mChipSelect = this;
    mTransfer.mClockPhase = Spi::ClockPhase::FirstTransition;
    mTransfer.mClockPolarity = Spi::ClockPolarity::LowWhenIdle;
    mTransfer.mEndianess = Spi::Endianess::MsbFirst;
    mTransfer.mEvent = &mSpiEvent;
    mTransfer.mLength = 2;
//    for (int i = 0; i < 256; ++i)
//    {
//        printf("{%02x, %02x, %02x, %02x, %02x}")
//    }
}

void Ssd1306::reset()
{
    mReset.set();
    System::instance()->usleep(100000);
    mReset.reset();
    System::instance()->usleep(100000);
    mReset.set();
}

void Ssd1306::init()
{
    static const uint8_t COMMANDS[] =
    {
        Command::DisplayOff,
        Command::ClockDivide,
        0x80,
        Command::Multiplex,
        0x3F,
        Command::DisplayOffset,
        0x00,
        Command::StartLine0,
        Command::ChargePump,
        0x14,
        Command::MemoryAddressing,
        0x00,
        Command::SegRemap127,
        Command::ComScanDec,
        Command::ComPins,
        0x12,
        Command::Contrast,
        0xcf,
        Command::PreCharge,
        0xF1,
        Command::DeselectLevel,
        0x40,
        Command::EntireDisplayOnResume,
        Command::DisplayNormal,
        Command::DisplayOn,
    };
    sendCommands(COMMANDS, sizeof(COMMANDS));
}

void Ssd1306::clear()
{
    std::memset(mFb, 0, FB_SIZE);
}

void Ssd1306::setPixel(int x, int y, bool on)
{
    if (on) mFb[x + (y / 8) * DISPLAY_WIDTH] |= 1 << (y % 8);
    else mFb[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y % 8));
}

void Ssd1306::drawString(int x, int y, const char* string)
{
    while (*string != 0 && x < DISPLAY_WIDTH - 6)
    {
        drawChar(x, y, *string);
        ++string;
        ++x;
    }
}

void Ssd1306::drawChar(int x, int y, char c)
{
    int offset = x * 6 + y * DISPLAY_WIDTH;
    for (int i = 0; i < 5; ++i)
    {
        if (c >= 32 && c <= 128) mFb[offset++] = FONT[(c - 32) * 5 + i];
    }
}

void Ssd1306::sendCommands(const uint8_t* cmds, unsigned size)
{
    mDc.reset();
    mTransfer.mWriteData = cmds;
    mTransfer.mLength = size;
    mSpi.transfer(&mTransfer);
}

void Ssd1306::select()
{
    mCs.reset();
}

void Ssd1306::deselect()
{
    mCs.set();
}

void Ssd1306::eventCallback(System::Event *event)
{
    if (!mDc.get())
    {
        mDc.set();
        mTransfer.mWriteData = mFb;
        mTransfer.mLength = FB_SIZE;
        mSpi.transfer(&mTransfer);
    }
}

void Ssd1306::sendData()
{
    static const uint8_t COMMANDS[] =
    {
        Command::LowColumn0,
        Command::HighColumn0,
        Command::StartLine0,
    };
    sendCommands(COMMANDS, sizeof(COMMANDS));
}
